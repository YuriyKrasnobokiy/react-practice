{"version":3,"file":"static/js/953.1b6d97eb.chunk.js","mappings":"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","sources":["pages/PostsPage.jsx"],"sourcesContent":["import axios from 'axios';\nimport { Loader } from 'components/Loader/Loader';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport css from './PostPage.module.css';\n\nconst PostsPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchedPost, setSearchedPost] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const queryValue = searchParams.get('query');\n  const location = useLocation();\n  // console.log('location: ', location);\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const value = e.currentTarget.elements.searchKey.value;\n    setSearchParams({ query: value });\n  };\n\n  useEffect(() => {\n    if (!queryValue) {\n      return;\n    }\n\n    const fetchSearchedPost = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const { data } = await axios.get(\n          `https://jsonplaceholder.typicode.com/posts/${queryValue}`\n        );\n\n        ////частіше достатньо  setSearchedPost(data), але якшо може бути декілька то так:////\n        setSearchedPost([data]);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchSearchedPost();\n  }, [queryValue]);\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <span>Search posts by id: </span>\n          <input name=\"searchKey\" type=\"text\" placeholder=\"12\" required />\n        </label>\n        <button type=\"submit\">Search post</button>\n      </form>\n      {error !== null && <p className={css.errorMessage}>{error}</p>}\n      {isLoading && <Loader />}\n      {searchedPost !== null && (\n        <div className={css.listWrapper}>\n          <ul className={css.postList}>\n            {searchedPost.map(post => {\n              return (\n                <Link\n                  key={post.id}\n                  state={{ from: location }}\n                  to={`/posts/${post.id}`}\n                >\n                  <li className={css.postItem}>\n                    <h2 className={css.itemTitle}>{post.title}</h2>\n                    <p className={css.itemBody}>{post.body}</p>\n                  </li>\n                </Link>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PostsPage;\n"],"names":["_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","_useState","useState","_useState2","searchedPost","setSearchedPost","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","queryValue","get","location","useLocation","useEffect","fetchSearchedPost","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$axios$get","data","_context","prev","next","axios","concat","sent","t0","message","finish","stop","apply","arguments","_jsxs","children","onSubmit","e","preventDefault","value","currentTarget","elements","searchKey","query","_jsx","name","type","placeholder","required","className","css","Loader","map","post","Link","state","from","to","id","title","body"],"sourceRoot":""}